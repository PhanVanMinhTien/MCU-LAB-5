
LAB5_Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003104  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000000c  08003250  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08003250  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e744  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002019  00000000  00000000  0002e779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00031508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a2c  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee36  00000000  00000000  00048bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089464  00000000  00000000  00057a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0e76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000e0ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031f8 	.word	0x080031f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031f8 	.word	0x080031f8

0800014c <led1test>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void led1test(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000150:	2110      	movs	r1, #16
 8000152:	4802      	ldr	r0, [pc, #8]	; (800015c <led1test+0x10>)
 8000154:	f001 fa2c 	bl	80015b0 <HAL_GPIO_TogglePin>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	40010800 	.word	0x40010800

08000160 <led2test>:

void led2test(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000164:	2120      	movs	r1, #32
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <led2test+0x10>)
 8000168:	f001 fa22 	bl	80015b0 <HAL_GPIO_TogglePin>
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40010800 	.word	0x40010800

08000174 <main>:

int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fc54 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f81e 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f920 	bl	80003c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000184:	f000 f86a 	bl	800025c <MX_ADC1_Init>

  MX_USART2_UART_Init();
 8000188:	f000 f8f2 	bl	8000370 <MX_USART2_UART_Init>

  MX_TIM2_Init();
 800018c:	f000 f8a4 	bl	80002d8 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000190:	4807      	ldr	r0, [pc, #28]	; (80001b0 <main+0x3c>)
 8000192:	f001 ff3b 	bl	800200c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  SCH_Add_Task(led2test, 100, 200);
 8000196:	22c8      	movs	r2, #200	; 0xc8
 8000198:	2164      	movs	r1, #100	; 0x64
 800019a:	4806      	ldr	r0, [pc, #24]	; (80001b4 <main+0x40>)
 800019c:	f000 f960 	bl	8000460 <SCH_Add_Task>
  SCH_Add_Task(led1test, 100, 100);
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	2164      	movs	r1, #100	; 0x64
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <main+0x44>)
 80001a6:	f000 f95b 	bl	8000460 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80001aa:	f000 fa3d 	bl	8000628 <SCH_Dispatch_Tasks>
 80001ae:	e7fc      	b.n	80001aa <main+0x36>
 80001b0:	20000058 	.word	0x20000058
 80001b4:	08000161 	.word	0x08000161
 80001b8:	0800014d 	.word	0x0800014d

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f003 f80c 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ec:	2302      	movs	r3, #2
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f8:	2300      	movs	r3, #0
 80001fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000200:	4618      	mov	r0, r3
 8000202:	f001 f9ef 	bl	80015e4 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800020c:	f000 f922 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000214:	2300      	movs	r3, #0
 8000216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fc5a 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000236:	f000 f90d 	bl	8000454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800023a:	2302      	movs	r3, #2
 800023c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fddb 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000250:	f000 f900 	bl	8000454 <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3750      	adds	r7, #80	; 0x50
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_ADC1_Init+0x74>)
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x78>)
 8000270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC1_Init+0x74>)
 800027a:	2201      	movs	r2, #1
 800027c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000286:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000294:	2201      	movs	r2, #1
 8000296:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fc25 	bl	8000ae8 <HAL_ADC_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f8d6 	bl	8000454 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fced 	bl	8000c98 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c4:	f000 f8c6 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40012400 	.word	0x40012400

080002d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <MX_TIM2_Init+0x94>)
 80002f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_TIM2_Init+0x94>)
 80002fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_TIM2_Init+0x94>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_TIM2_Init+0x94>)
 800030c:	2209      	movs	r2, #9
 800030e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_TIM2_Init+0x94>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_TIM2_Init+0x94>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800031c:	4813      	ldr	r0, [pc, #76]	; (800036c <MX_TIM2_Init+0x94>)
 800031e:	f001 fe25 	bl	8001f6c <HAL_TIM_Base_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000328:	f000 f894 	bl	8000454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	4619      	mov	r1, r3
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <MX_TIM2_Init+0x94>)
 800033a:	f001 ffbb 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000344:	f000 f886 	bl	8000454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_TIM2_Init+0x94>)
 8000356:	f002 f987 	bl	8002668 <HAL_TIMEx_MasterConfigSynchronization>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000360:	f000 f878 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000058 	.word	0x20000058

08000370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <MX_USART2_UART_Init+0x50>)
 8000378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 800037c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_USART2_UART_Init+0x4c>)
 80003a8:	f002 f9c8 	bl	800273c <HAL_UART_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003b2:	f000 f84f 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000a0 	.word	0x200000a0
 80003c0:	40004400 	.word	0x40004400

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_GPIO_Init+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a16      	ldr	r2, [pc, #88]	; (8000438 <MX_GPIO_Init+0x74>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_GPIO_Init+0x74>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2130      	movs	r1, #48	; 0x30
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <MX_GPIO_Init+0x78>)
 80003f6:	f001 f8c3 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80003fa:	2330      	movs	r3, #48	; 0x30
 80003fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4619      	mov	r1, r3
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <MX_GPIO_Init+0x78>)
 8000412:	f000 ff3b 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000416:	2340      	movs	r3, #64	; 0x40
 8000418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041a:	2302      	movs	r3, #2
 800041c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_GPIO_Init+0x78>)
 800042a:	f000 ff2f 	bl	800128c <HAL_GPIO_Init>

}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800

08000440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000448:	f000 f86a 	bl	8000520 <SCH_Update>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <SCH_Add_Task>:

		current_index_task++;
	}
}*/

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
	unsigned char index=0;
 800046c:	2300      	movs	r3, #0
 800046e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask!=0x0000) && (index<SCH_MAX_TASKS)) {
 8000470:	e002      	b.n	8000478 <SCH_Add_Task+0x18>
		index++;
 8000472:	7dfb      	ldrb	r3, [r7, #23]
 8000474:	3301      	adds	r3, #1
 8000476:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask!=0x0000) && (index<SCH_MAX_TASKS)) {
 8000478:	7dfa      	ldrb	r2, [r7, #23]
 800047a:	4928      	ldr	r1, [pc, #160]	; (800051c <SCH_Add_Task+0xbc>)
 800047c:	4613      	mov	r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4413      	add	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	440b      	add	r3, r1
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d002      	beq.n	8000492 <SCH_Add_Task+0x32>
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	2b27      	cmp	r3, #39	; 0x27
 8000490:	d9ef      	bls.n	8000472 <SCH_Add_Task+0x12>
	}
	if (index>=SCH_MAX_TASKS) {
 8000492:	7dfb      	ldrb	r3, [r7, #23]
 8000494:	2b27      	cmp	r3, #39	; 0x27
 8000496:	d902      	bls.n	800049e <SCH_Add_Task+0x3e>
		return -1;
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	e039      	b.n	8000512 <SCH_Add_Task+0xb2>
	}
	DELAY=(DELAY==0)?0:DELAY-1;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <SCH_Add_Task+0x4a>
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	e000      	b.n	80004ac <SCH_Add_Task+0x4c>
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
	SCH_tasks_G [ index ].pTask = pFunction;
 80004ae:	7dfa      	ldrb	r2, [r7, #23]
 80004b0:	491a      	ldr	r1, [pc, #104]	; (800051c <SCH_Add_Task+0xbc>)
 80004b2:	4613      	mov	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	440b      	add	r3, r1
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Delay = DELAY ;
 80004c0:	7dfa      	ldrb	r2, [r7, #23]
 80004c2:	4916      	ldr	r1, [pc, #88]	; (800051c <SCH_Add_Task+0xbc>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	3304      	adds	r3, #4
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Period = PERIOD ;
 80004d4:	7dfa      	ldrb	r2, [r7, #23]
 80004d6:	4911      	ldr	r1, [pc, #68]	; (800051c <SCH_Add_Task+0xbc>)
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	3308      	adds	r3, #8
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].RunMe = 0 ;
 80004e8:	7dfa      	ldrb	r2, [r7, #23]
 80004ea:	490c      	ldr	r1, [pc, #48]	; (800051c <SCH_Add_Task+0xbc>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	330c      	adds	r3, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].TaskID= index;
 80004fc:	7dfa      	ldrb	r2, [r7, #23]
 80004fe:	7df9      	ldrb	r1, [r7, #23]
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <SCH_Add_Task+0xbc>)
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4403      	add	r3, r0
 800050c:	3310      	adds	r3, #16
 800050e:	6019      	str	r1, [r3, #0]
	return index;
 8000510:	7dfb      	ldrb	r3, [r7, #23]
}
 8000512:	4618      	mov	r0, r3
 8000514:	371c      	adds	r7, #28
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	200000e8 	.word	0x200000e8

08000520 <SCH_Update>:
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
			SCH_tasks_G[i].RunMe += 1;
		}
	}
}*/
void SCH_Update(void) {
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e071      	b.n	8000610 <SCH_Update+0xf0>
		 if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay==0) {
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	493d      	ldr	r1, [pc, #244]	; (8000624 <SCH_Update+0x104>)
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d03c      	beq.n	80005ba <SCH_Update+0x9a>
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	4938      	ldr	r1, [pc, #224]	; (8000624 <SCH_Update+0x104>)
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	3304      	adds	r3, #4
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d131      	bne.n	80005ba <SCH_Update+0x9a>
//			timestamp(index);
			SCH_tasks_G[index].RunMe+=1;
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	4932      	ldr	r1, [pc, #200]	; (8000624 <SCH_Update+0x104>)
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	440b      	add	r3, r1
 8000564:	330c      	adds	r3, #12
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	1c59      	adds	r1, r3, #1
 800056c:	482d      	ldr	r0, [pc, #180]	; (8000624 <SCH_Update+0x104>)
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4403      	add	r3, r0
 8000578:	330c      	adds	r3, #12
 800057a:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 800057c:	79fa      	ldrb	r2, [r7, #7]
 800057e:	4929      	ldr	r1, [pc, #164]	; (8000624 <SCH_Update+0x104>)
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	3308      	adds	r3, #8
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d03b      	beq.n	800060a <SCH_Update+0xea>
				SCH_tasks_G[index].Delay=SCH_tasks_G[index].Period-1;
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	4923      	ldr	r1, [pc, #140]	; (8000624 <SCH_Update+0x104>)
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	3308      	adds	r3, #8
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	1e59      	subs	r1, r3, #1
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <SCH_Update+0x104>)
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4403      	add	r3, r0
 80005b4:	3304      	adds	r3, #4
 80005b6:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 80005b8:	e027      	b.n	800060a <SCH_Update+0xea>
			}
		} else if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay>0) {
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	4919      	ldr	r1, [pc, #100]	; (8000624 <SCH_Update+0x104>)
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	440b      	add	r3, r1
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d01d      	beq.n	800060a <SCH_Update+0xea>
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	4914      	ldr	r1, [pc, #80]	; (8000624 <SCH_Update+0x104>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	440b      	add	r3, r1
 80005dc:	3304      	adds	r3, #4
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d012      	beq.n	800060a <SCH_Update+0xea>
			SCH_tasks_G[index].Delay-=1;
 80005e4:	79fa      	ldrb	r2, [r7, #7]
 80005e6:	490f      	ldr	r1, [pc, #60]	; (8000624 <SCH_Update+0x104>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3304      	adds	r3, #4
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	1e59      	subs	r1, r3, #1
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <SCH_Update+0x104>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4403      	add	r3, r0
 8000606:	3304      	adds	r3, #4
 8000608:	6019      	str	r1, [r3, #0]
	for (index=0;index<SCH_MAX_TASKS;index++) {
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	3301      	adds	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b27      	cmp	r3, #39	; 0x27
 8000614:	d98a      	bls.n	800052c <SCH_Update+0xc>
		}
	}
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200000e8 	.word	0x200000e8

08000628 <SCH_Dispatch_Tasks>:
			SCH_tasks_G[i].RunMe--;
			(*SCH_tasks_G[i].pTask)();
		}
	}
}*/
void SCH_Dispatch_Tasks(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	unsigned char index;
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	for (index=0;index<SCH_MAX_TASKS;index++) {
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	e04e      	b.n	80006d2 <SCH_Dispatch_Tasks+0xaa>
		if (SCH_tasks_G[index].RunMe>0) {
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	492b      	ldr	r1, [pc, #172]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	330c      	adds	r3, #12
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d040      	beq.n	80006cc <SCH_Dispatch_Tasks+0xa4>
			(*SCH_tasks_G[index].pTask)();
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	4925      	ldr	r1, [pc, #148]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4798      	blx	r3
			SCH_tasks_G[index].RunMe-=1;
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	4921      	ldr	r1, [pc, #132]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	330c      	adds	r3, #12
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	1e59      	subs	r1, r3, #1
 8000672:	481c      	ldr	r0, [pc, #112]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 8000674:	4613      	mov	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4403      	add	r3, r0
 800067e:	330c      	adds	r3, #12
 8000680:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period==0 && SCH_tasks_G[index].RunMe == 0 && SCH_tasks_G[index].Delay==0) {
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	4917      	ldr	r1, [pc, #92]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3308      	adds	r3, #8
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d119      	bne.n	80006cc <SCH_Dispatch_Tasks+0xa4>
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	4912      	ldr	r1, [pc, #72]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	330c      	adds	r3, #12
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10e      	bne.n	80006cc <SCH_Dispatch_Tasks+0xa4>
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <SCH_Dispatch_Tasks+0xbc>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	3304      	adds	r3, #4
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d103      	bne.n	80006cc <SCH_Dispatch_Tasks+0xa4>
				SCH_Delete_Task(index);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f80e 	bl	80006e8 <SCH_Delete_Task>
	for (index=0;index<SCH_MAX_TASKS;index++) {
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	3301      	adds	r3, #1
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b27      	cmp	r3, #39	; 0x27
 80006d6:	d9ad      	bls.n	8000634 <SCH_Dispatch_Tasks+0xc>
//			timestamp(index);
		}

	}
//	SCH_Report_Status();
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000e8 	.word	0x200000e8

080006e8 <SCH_Delete_Task>:

uint32_t SCH_Delete_Task(uint32_t TASK_INDEX) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if (TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASKS) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b27      	cmp	r3, #39	; 0x27
 80006f4:	d902      	bls.n	80006fc <SCH_Delete_Task+0x14>
		return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e03f      	b.n	800077c <SCH_Delete_Task+0x94>
	}
	if (SCH_tasks_G[TASK_INDEX].pTask==0x0000) {
 80006fc:	4922      	ldr	r1, [pc, #136]	; (8000788 <SCH_Delete_Task+0xa0>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <SCH_Delete_Task+0x2e>
		return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e032      	b.n	800077c <SCH_Delete_Task+0x94>
	}
	SCH_tasks_G[TASK_INDEX].pTask=0x0000;
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <SCH_Delete_Task+0xa0>)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay=0;
 8000728:	4917      	ldr	r1, [pc, #92]	; (8000788 <SCH_Delete_Task+0xa0>)
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	3304      	adds	r3, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period=0;
 800073c:	4912      	ldr	r1, [pc, #72]	; (8000788 <SCH_Delete_Task+0xa0>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	3308      	adds	r3, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe=0;
 8000750:	490d      	ldr	r1, [pc, #52]	; (8000788 <SCH_Delete_Task+0xa0>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	330c      	adds	r3, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID=-1;
 8000764:	4908      	ldr	r1, [pc, #32]	; (8000788 <SCH_Delete_Task+0xa0>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	440b      	add	r3, r1
 8000772:	3310      	adds	r3, #16
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	601a      	str	r2, [r3, #0]
	return TASK_INDEX;
 800077a:	687b      	ldr	r3, [r7, #4]
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000e8 	.word	0x200000e8

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_ADC_MspInit+0x6c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d121      	bne.n	8000854 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	2303      	movs	r3, #3
 8000846:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_ADC_MspInit+0x74>)
 8000850:	f000 fd1c 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012400 	.word	0x40012400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000878:	d113      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_TIM_Base_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_TIM_Base_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_Base_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	201c      	movs	r0, #28
 8000898:	f000 fc0f 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089c:	201c      	movs	r0, #28
 800089e:	f000 fc28 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <HAL_UART_MspInit+0x98>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d137      	bne.n	8000940 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a1d      	ldr	r2, [pc, #116]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x9c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000900:	2304      	movs	r3, #4
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <HAL_UART_MspInit+0xa0>)
 8000914:	f000 fcba 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000918:	2308      	movs	r3, #8
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <HAL_UART_MspInit+0xa0>)
 800092c:	f000 fcae 	bl	800128c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2026      	movs	r0, #38	; 0x26
 8000936:	f000 fbc0 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800093a:	2026      	movs	r0, #38	; 0x26
 800093c:	f000 fbd9 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099a:	f000 f889 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <TIM2_IRQHandler+0x10>)
 80009aa:	f001 fb7b 	bl	80020a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000058 	.word	0x20000058

080009b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <USART2_IRQHandler+0x10>)
 80009be:	f001 ff0d 	bl	80027dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000a0 	.word	0x200000a0

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff fff8 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009de:	490c      	ldr	r1, [pc, #48]	; (8000a10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009f4:	4c09      	ldr	r4, [pc, #36]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f002 fbcd 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fbb5 	bl	8000174 <main>
  bx lr
 8000a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	2000040c 	.word	0x2000040c

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x28>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 fb35 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fea4 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fb4d 	bl	800110e <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 fb15 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000408 	.word	0x20000408

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000408 	.word	0x20000408

08000ae8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e0be      	b.n	8000c88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fe62 	bl	80007f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f9ab 	bl	8000e88 <ADC_ConversionStop_Disable>
 8000b32:	4603      	mov	r3, r0
 8000b34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8099 	bne.w	8000c76 <HAL_ADC_Init+0x18e>
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8095 	bne.w	8000c76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b54:	f023 0302 	bic.w	r3, r3, #2
 8000b58:	f043 0202 	orr.w	r2, r3, #2
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7b1b      	ldrb	r3, [r3, #12]
 8000b6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b80:	d003      	beq.n	8000b8a <HAL_ADC_Init+0xa2>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d102      	bne.n	8000b90 <HAL_ADC_Init+0xa8>
 8000b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8e:	e000      	b.n	8000b92 <HAL_ADC_Init+0xaa>
 8000b90:	2300      	movs	r3, #0
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7d1b      	ldrb	r3, [r3, #20]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d119      	bne.n	8000bd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	035a      	lsls	r2, r3, #13
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	e00b      	b.n	8000bd4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	f043 0220 	orr.w	r2, r3, #32
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bcc:	f043 0201 	orr.w	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <HAL_ADC_Init+0x1a8>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d003      	beq.n	8000c0e <HAL_ADC_Init+0x126>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	051b      	lsls	r3, r3, #20
 8000c16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_ADC_Init+0x1ac>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d10b      	bne.n	8000c54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c46:	f023 0303 	bic.w	r3, r3, #3
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c52:	e018      	b.n	8000c86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f023 0312 	bic.w	r3, r3, #18
 8000c5c:	f043 0210 	orr.w	r2, r3, #16
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	f043 0201 	orr.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c74:	e007      	b.n	8000c86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f043 0210 	orr.w	r2, r3, #16
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	ffe1f7fd 	.word	0xffe1f7fd
 8000c94:	ff1f0efe 	.word	0xff1f0efe

08000c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x20>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e0dc      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x1da>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b06      	cmp	r3, #6
 8000cc6:	d81c      	bhi.n	8000d02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3b05      	subs	r3, #5
 8000cda:	221f      	movs	r2, #31
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4019      	ands	r1, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3b05      	subs	r3, #5
 8000cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000d00:	e03c      	b.n	8000d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d81c      	bhi.n	8000d44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b23      	subs	r3, #35	; 0x23
 8000d1c:	221f      	movs	r2, #31
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4019      	ands	r1, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	3b23      	subs	r3, #35	; 0x23
 8000d36:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
 8000d42:	e01b      	b.n	8000d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	3b41      	subs	r3, #65	; 0x41
 8000d56:	221f      	movs	r2, #31
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4019      	ands	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b41      	subs	r3, #65	; 0x41
 8000d70:	fa00 f203 	lsl.w	r2, r0, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d91c      	bls.n	8000dbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68d9      	ldr	r1, [r3, #12]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	3b1e      	subs	r3, #30
 8000d96:	2207      	movs	r2, #7
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4019      	ands	r1, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	6898      	ldr	r0, [r3, #8]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	3b1e      	subs	r3, #30
 8000db0:	fa00 f203 	lsl.w	r2, r0, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	e019      	b.n	8000df2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6919      	ldr	r1, [r3, #16]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	2207      	movs	r2, #7
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d003      	beq.n	8000e02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dfe:	2b11      	cmp	r3, #17
 8000e00:	d132      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_ADC_ConfigChannel+0x1e4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d125      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d126      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d11a      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9a      	lsrs	r2, r3, #18
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e48:	e002      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x1b2>
 8000e56:	e007      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0220 	orr.w	r2, r3, #32
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40012400 	.word	0x40012400
 8000e80:	20000000 	.word	0x20000000
 8000e84:	431bde83 	.word	0x431bde83

08000e88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d12e      	bne.n	8000f00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0201 	bic.w	r2, r2, #1
 8000eb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb2:	f7ff fe0f 	bl	8000ad4 <HAL_GetTick>
 8000eb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb8:	e01b      	b.n	8000ef2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eba:	f7ff fe0b 	bl	8000ad4 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d914      	bls.n	8000ef2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10d      	bne.n	8000ef2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	f043 0210 	orr.w	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e007      	b.n	8000f02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d0dc      	beq.n	8000eba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <__NVIC_EnableIRQ+0x34>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff90 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff2d 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff42 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff35 	bl	8000f70 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d008      	beq.n	8001150 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2204      	movs	r2, #4
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e020      	b.n	8001192 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020e 	bic.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d005      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e051      	b.n	8001264 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 020e 	bic.w	r2, r2, #14
 80011ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <HAL_DMA_Abort_IT+0xd4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d029      	beq.n	800123e <HAL_DMA_Abort_IT+0xa2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_DMA_Abort_IT+0xd8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d022      	beq.n	800123a <HAL_DMA_Abort_IT+0x9e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <HAL_DMA_Abort_IT+0xdc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01a      	beq.n	8001234 <HAL_DMA_Abort_IT+0x98>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <HAL_DMA_Abort_IT+0xe0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d012      	beq.n	800122e <HAL_DMA_Abort_IT+0x92>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_DMA_Abort_IT+0xe4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00a      	beq.n	8001228 <HAL_DMA_Abort_IT+0x8c>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_DMA_Abort_IT+0xe8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d102      	bne.n	8001222 <HAL_DMA_Abort_IT+0x86>
 800121c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001220:	e00e      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 8001222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001226:	e00b      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 8001228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122c:	e008      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	e005      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 8001234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001238:	e002      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 800123a:	2310      	movs	r3, #16
 800123c:	e000      	b.n	8001240 <HAL_DMA_Abort_IT+0xa4>
 800123e:	2301      	movs	r3, #1
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_DMA_Abort_IT+0xec>)
 8001242:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    } 
  }
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020008 	.word	0x40020008
 8001274:	4002001c 	.word	0x4002001c
 8001278:	40020030 	.word	0x40020030
 800127c:	40020044 	.word	0x40020044
 8001280:	40020058 	.word	0x40020058
 8001284:	4002006c 	.word	0x4002006c
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e148      	b.n	8001532 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a0:	2201      	movs	r2, #1
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8137 	bne.w	800152c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4aa3      	ldr	r2, [pc, #652]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d05e      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012c8:	4aa1      	ldr	r2, [pc, #644]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d875      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012ce:	4aa1      	ldr	r2, [pc, #644]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d058      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012d4:	4a9f      	ldr	r2, [pc, #636]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d86f      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012da:	4a9f      	ldr	r2, [pc, #636]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d052      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012e0:	4a9d      	ldr	r2, [pc, #628]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d869      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012e6:	4a9d      	ldr	r2, [pc, #628]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d04c      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012ec:	4a9b      	ldr	r2, [pc, #620]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d863      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012f2:	4a9b      	ldr	r2, [pc, #620]	; (8001560 <HAL_GPIO_Init+0x2d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d046      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012f8:	4a99      	ldr	r2, [pc, #612]	; (8001560 <HAL_GPIO_Init+0x2d4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d85d      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d82a      	bhi.n	8001358 <HAL_GPIO_Init+0xcc>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d859      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <HAL_GPIO_Init+0x80>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	08001387 	.word	0x08001387
 8001310:	08001361 	.word	0x08001361
 8001314:	08001373 	.word	0x08001373
 8001318:	080013b5 	.word	0x080013b5
 800131c:	080013bb 	.word	0x080013bb
 8001320:	080013bb 	.word	0x080013bb
 8001324:	080013bb 	.word	0x080013bb
 8001328:	080013bb 	.word	0x080013bb
 800132c:	080013bb 	.word	0x080013bb
 8001330:	080013bb 	.word	0x080013bb
 8001334:	080013bb 	.word	0x080013bb
 8001338:	080013bb 	.word	0x080013bb
 800133c:	080013bb 	.word	0x080013bb
 8001340:	080013bb 	.word	0x080013bb
 8001344:	080013bb 	.word	0x080013bb
 8001348:	080013bb 	.word	0x080013bb
 800134c:	080013bb 	.word	0x080013bb
 8001350:	08001369 	.word	0x08001369
 8001354:	0800137d 	.word	0x0800137d
 8001358:	4a82      	ldr	r2, [pc, #520]	; (8001564 <HAL_GPIO_Init+0x2d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135e:	e02c      	b.n	80013ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e029      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	3304      	adds	r3, #4
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e024      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	3308      	adds	r3, #8
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e01f      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	330c      	adds	r3, #12
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e01a      	b.n	80013bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138e:	2304      	movs	r3, #4
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e013      	b.n	80013bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	611a      	str	r2, [r3, #16]
          break;
 80013a6:	e009      	b.n	80013bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	615a      	str	r2, [r3, #20]
          break;
 80013b2:	e003      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x130>
          break;
 80013ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d801      	bhi.n	80013c6 <HAL_GPIO_Init+0x13a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d802      	bhi.n	80013d8 <HAL_GPIO_Init+0x14c>
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x152>
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	3b08      	subs	r3, #8
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	210f      	movs	r1, #15
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	6a39      	ldr	r1, [r7, #32]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8090 	beq.w	800152c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140c:	4b56      	ldr	r3, [pc, #344]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001424:	4a51      	ldr	r2, [pc, #324]	; (800156c <HAL_GPIO_Init+0x2e0>)
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_GPIO_Init+0x1e0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_Init+0x1d8>
 8001460:	2302      	movs	r3, #2
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 8001464:	2303      	movs	r3, #3
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 800146c:	2300      	movs	r3, #0
 800146e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147e:	493b      	ldr	r1, [pc, #236]	; (800156c <HAL_GPIO_Init+0x2e0>)
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_GPIO_Init+0x2f0>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_GPIO_Init+0x2f0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4933      	ldr	r1, [pc, #204]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	492d      	ldr	r1, [pc, #180]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4929      	ldr	r1, [pc, #164]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4923      	ldr	r1, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_GPIO_Init+0x2f0>)
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	491f      	ldr	r1, [pc, #124]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001500:	4013      	ands	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4919      	ldr	r1, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	4915      	ldr	r1, [pc, #84]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001528:	4013      	ands	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	3301      	adds	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f aeaf 	bne.w	80012a0 <HAL_GPIO_Init+0x14>
  }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	372c      	adds	r7, #44	; 0x2c
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	10320000 	.word	0x10320000
 8001554:	10310000 	.word	0x10310000
 8001558:	10220000 	.word	0x10220000
 800155c:	10210000 	.word	0x10210000
 8001560:	10120000 	.word	0x10120000
 8001564:	10110000 	.word	0x10110000
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000
 8001570:	40010800 	.word	0x40010800
 8001574:	40010c00 	.word	0x40010c00
 8001578:	40011000 	.word	0x40011000
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43d9      	mvns	r1, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	400b      	ands	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	611a      	str	r2, [r3, #16]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e26c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x12c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e246      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x76>
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a77      	ldr	r2, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xbc>
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa08 	bl	8000ad4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fa04 	bl	8000ad4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1fa      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe4>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9f4 	bl	8000ad4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff f9f0 	bl	8000ad4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1e6      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x10c>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1ba      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff f9a9 	bl	8000ad4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff f9a5 	bl	8000ad4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e19b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff f988 	bl	8000ad4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff f984 	bl	8000ad4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e17a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff f968 	bl	8000ad4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f964 	bl	8000ad4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e15a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 facc 	bl	8001dc4 <RCC_Delay>
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f94e 	bl	8000ad4 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f94a 	bl	8000ad4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d908      	bls.n	800185c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e140      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	42420000 	.word	0x42420000
 8001858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e9      	bne.n	800183c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a6 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b97      	ldr	r3, [pc, #604]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a93      	ldr	r2, [pc, #588]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff f90b 	bl	8000ad4 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff f907 	bl	8000ad4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0fd      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a7a      	ldr	r2, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x334>
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x356>
 8001920:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a6c      	ldr	r2, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a69      	ldr	r2, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a66      	ldr	r2, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a63      	ldr	r2, [pc, #396]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff f8bb 	bl	8000ad4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff f8b7 	bl	8000ad4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0ab      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x37e>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff f8a5 	bl	8000ad4 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f8a1 	bl	8000ad4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e095      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8081 	beq.w	8001ace <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d061      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d146      	bne.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff f875 	bl	8000ad4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f871 	bl	8000ad4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e067      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	492d      	ldr	r1, [pc, #180]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	4927      	ldr	r1, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f845 	bl	8000ad4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f841 	bl	8000ad4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e037      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46a>
 8001a6c:	e02f      	b.n	8001ace <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f82e 	bl	8000ad4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f82a 	bl	8000ad4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e020      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x498>
 8001a9a:	e018      	b.n	8001ace <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e013      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42420060 	.word	0x42420060

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0d0      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4965      	ldr	r1, [pc, #404]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494d      	ldr	r1, [pc, #308]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d040      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e073      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06b      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe ff7e 	bl	8000ad4 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7fe ff7a 	bl	8000ad4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e053      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d210      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4922      	ldr	r1, [pc, #136]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fedc 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08003210 	.word	0x08003210
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x36>
 8001ce6:	e027      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cea:	613b      	str	r3, [r7, #16]
      break;
 8001cec:	e027      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0c9b      	lsrs	r3, r3, #18
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0c5b      	lsrs	r3, r3, #17
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1a:	fb02 f203 	mul.w	r2, r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e004      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	613b      	str	r3, [r7, #16]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3a:	613b      	str	r3, [r7, #16]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	693b      	ldr	r3, [r7, #16]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	08003228 	.word	0x08003228
 8001d58:	08003238 	.word	0x08003238
 8001d5c:	003d0900 	.word	0x003d0900

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000000 	.word	0x20000000

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08003220 	.word	0x08003220

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0adb      	lsrs	r3, r3, #11
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08003220 	.word	0x08003220

08001dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <RCC_Delay+0x34>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <RCC_Delay+0x38>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de0:	bf00      	nop
  }
  while (Delay --);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	60fa      	str	r2, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <RCC_Delay+0x1c>
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	10624dd3 	.word	0x10624dd3

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d07d      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e36:	61d3      	str	r3, [r2, #28]
 8001e38:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d118      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e54:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e60:	f7fe fe38 	bl	8000ad4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	e008      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7fe fe34 	bl	8000ad4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e06d      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02e      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d027      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d014      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fe03 	bl	8000ad4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fdff 	bl	8000ad4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e036      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4917      	ldr	r1, [pc, #92]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42420440 	.word	0x42420440

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e041      	b.n	8002002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fc68 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f000 fa6e 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d001      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e035      	b.n	8002090 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_TIM_Base_Start_IT+0x90>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x4e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d004      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x4e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d111      	bne.n	800207e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d010      	beq.n	800208e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207c:	e007      	b.n	800208e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400

080020a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0202 	mvn.w	r2, #2
 80020d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f9b4 	bl	8002454 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9a7 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f9b6 	bl	8002466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0204 	mvn.w	r2, #4
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f98a 	bl	8002454 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f97d 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f98c 	bl	8002466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b08      	cmp	r3, #8
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b08      	cmp	r3, #8
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0208 	mvn.w	r2, #8
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2204      	movs	r2, #4
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f960 	bl	8002454 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f953 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f962 	bl	8002466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0210 	mvn.w	r2, #16
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2208      	movs	r2, #8
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f936 	bl	8002454 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f929 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f938 	bl	8002466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0201 	mvn.w	r2, #1
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f90c 	bl	8000440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa6b 	bl	800272a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8fc 	bl	8002478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0220 	mvn.w	r2, #32
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa36 	bl	8002718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_TIM_ConfigClockSource+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0b4      	b.n	800243a <HAL_TIM_ConfigClockSource+0x186>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002308:	d03e      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0xd4>
 800230a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230e:	f200 8087 	bhi.w	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002316:	f000 8086 	beq.w	8002426 <HAL_TIM_ConfigClockSource+0x172>
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231e:	d87f      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d01a      	beq.n	800235a <HAL_TIM_ConfigClockSource+0xa6>
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d87b      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002328:	2b60      	cmp	r3, #96	; 0x60
 800232a:	d050      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x11a>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d877      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	d03c      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xfa>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d873      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d058      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0x13a>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d86f      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b30      	cmp	r3, #48	; 0x30
 8002342:	d064      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d86b      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b20      	cmp	r3, #32
 800234a:	d060      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 800234c:	2b20      	cmp	r3, #32
 800234e:	d867      	bhi.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002354:	2b10      	cmp	r3, #16
 8002356:	d05a      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x15a>
 8002358:	e062      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f000 f95e 	bl	800262a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800237c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	609a      	str	r2, [r3, #8]
      break;
 8002386:	e04f      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f000 f947 	bl	800262a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023aa:	609a      	str	r2, [r3, #8]
      break;
 80023ac:	e03c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 f8be 	bl	800253c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2150      	movs	r1, #80	; 0x50
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f915 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 80023cc:	e02c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	461a      	mov	r2, r3
 80023dc:	f000 f8dc 	bl	8002598 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2160      	movs	r1, #96	; 0x60
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f905 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 80023ec:	e01c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 f89e 	bl	800253c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f8f5 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 800240c:	e00c      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f000 f8ec 	bl	80025f6 <TIM_ITRx_SetConfig>
      break;
 800241e:	e003      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e000      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
	...

0800248c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_Base_SetConfig+0x28>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0x28>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <TIM_Base_SetConfig+0xac>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d108      	bne.n	80024c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <TIM_Base_SetConfig+0x52>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d003      	beq.n	80024de <TIM_Base_SetConfig+0x52>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <TIM_Base_SetConfig+0xac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <TIM_Base_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d103      	bne.n	8002524 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	615a      	str	r2, [r3, #20]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400

0800253c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 030a 	bic.w	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0210 	bic.w	r2, r3, #16
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	031b      	lsls	r3, r3, #12
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	621a      	str	r2, [r3, #32]
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	f043 0307 	orr.w	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	021a      	lsls	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4313      	orrs	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	609a      	str	r2, [r3, #8]
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800267c:	2302      	movs	r3, #2
 800267e:	e041      	b.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d004      	beq.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a10      	ldr	r2, [pc, #64]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10c      	bne.n	80026f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400

08002718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e042      	b.n	80027d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe f8a4 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fc7f 	bl	8003084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0ba      	sub	sp, #232	; 0xe8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800281a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_UART_IRQHandler+0x66>
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb63 	bl	8002f06 <UART_Receive_IT>
      return;
 8002840:	e25b      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80de 	beq.w	8002a08 <HAL_UART_IRQHandler+0x22c>
 800284c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80d1 	beq.w	8002a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_UART_IRQHandler+0xae>
 8002872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_UART_IRQHandler+0xd2>
 8002896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_UART_IRQHandler+0xf6>
 80028ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f043 0204 	orr.w	r2, r3, #4
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <HAL_UART_IRQHandler+0x126>
 80028de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0208 	orr.w	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81f2 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_UART_IRQHandler+0x14e>
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 faee 	bl	8002f06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_UART_IRQHandler+0x17a>
 800294e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04f      	beq.n	80029f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f9f8 	bl	8002d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d041      	beq.n	80029ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800299a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1d9      	bne.n	800296a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	4a7e      	ldr	r2, [pc, #504]	; (8002bbc <HAL_UART_IRQHandler+0x3e0>)
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fbe6 	bl	800119c <HAL_DMA_Abort_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029e0:	4610      	mov	r0, r2
 80029e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	e00e      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f99c 	bl	8002d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	e00a      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f998 	bl	8002d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e006      	b.n	8002a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f994 	bl	8002d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a02:	e175      	b.n	8002cf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	bf00      	nop
    return;
 8002a06:	e173      	b.n	8002cf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 814f 	bne.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8148 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8141 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80b6 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8145 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f080 813e 	bcs.w	8002cf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f000 8088 	beq.w	8002b9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ab8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1d9      	bne.n	8002a8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002afc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e1      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e3      	bne.n	8002b14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6c:	f023 0310 	bic.w	r3, r3, #16
 8002b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e3      	bne.n	8002b5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fac5 	bl	8001126 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8bf 	bl	8002d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bb8:	e09c      	b.n	8002cf4 <HAL_UART_IRQHandler+0x518>
 8002bba:	bf00      	nop
 8002bbc:	08002e11 	.word	0x08002e11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 808e 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8089 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e3      	bne.n	8002be6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c42:	633a      	str	r2, [r7, #48]	; 0x30
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e3      	bne.n	8002c1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0310 	bic.w	r3, r3, #16
 8002c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c88:	61fa      	str	r2, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	617b      	str	r3, [r7, #20]
   return(result);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e3      	bne.n	8002c64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f844 	bl	8002d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cae:	e023      	b.n	8002cf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x4f4>
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8b5 	bl	8002e38 <UART_Transmit_IT>
    return;
 8002cce:	e014      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_UART_IRQHandler+0x51e>
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8f4 	bl	8002ed6 <UART_EndTransmit_IT>
    return;
 8002cee:	e004      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
    return;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002cf8:	bf00      	nop
  }
}
 8002cfa:	37e8      	adds	r7, #232	; 0xe8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b095      	sub	sp, #84	; 0x54
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d74:	643a      	str	r2, [r7, #64]	; 0x40
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3314      	adds	r3, #20
 8002da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d119      	bne.n	8002df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f023 0310 	bic.w	r3, r3, #16
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de4:	61ba      	str	r2, [r7, #24]
 8002de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	613b      	str	r3, [r7, #16]
   return(result);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e06:	bf00      	nop
 8002e08:	3754      	adds	r7, #84	; 0x54
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff ff7a 	bl	8002d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b21      	cmp	r3, #33	; 0x21
 8002e4a:	d13e      	bne.n	8002eca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d114      	bne.n	8002e80 <UART_Transmit_IT+0x48>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d110      	bne.n	8002e80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]
 8002e7e:	e008      	b.n	8002e92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	1c59      	adds	r1, r3, #1
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6211      	str	r1, [r2, #32]
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff02 	bl	8002d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b08c      	sub	sp, #48	; 0x30
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b22      	cmp	r3, #34	; 0x22
 8002f18:	f040 80ae 	bne.w	8003078 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d117      	bne.n	8002f56 <UART_Receive_IT+0x50>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d113      	bne.n	8002f56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
 8002f54:	e026      	b.n	8002fa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d007      	beq.n	8002f7a <UART_Receive_IT+0x74>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <UART_Receive_IT+0x82>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e008      	b.n	8002f9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d15d      	bne.n	8003074 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0220 	bic.w	r2, r2, #32
 8002fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d135      	bne.n	800306a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	613b      	str	r3, [r7, #16]
   return(result);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f023 0310 	bic.w	r3, r3, #16
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	623a      	str	r2, [r7, #32]
 8003026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	69f9      	ldr	r1, [r7, #28]
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	61bb      	str	r3, [r7, #24]
   return(result);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	d10a      	bne.n	800305c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fe67 	bl	8002d36 <HAL_UARTEx_RxEventCallback>
 8003068:	e002      	b.n	8003070 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe51 	bl	8002d12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e002      	b.n	800307a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030be:	f023 030c 	bic.w	r3, r3, #12
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <UART_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7fe fe56 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	e002      	b.n	80030fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7fe fe3e 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	0119      	lsls	r1, r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	4419      	add	r1, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	440a      	add	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2600      	movs	r6, #0
 80031a4:	4d0c      	ldr	r5, [pc, #48]	; (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f000 f822 	bl	80031f8 <_init>
 80031b4:	2600      	movs	r6, #0
 80031b6:	4d0a      	ldr	r5, [pc, #40]	; (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <__libc_init_array+0x44>)
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	0800323c 	.word	0x0800323c
 80031dc:	0800323c 	.word	0x0800323c
 80031e0:	0800323c 	.word	0x0800323c
 80031e4:	08003240 	.word	0x08003240

080031e8 <memset>:
 80031e8:	4603      	mov	r3, r0
 80031ea:	4402      	add	r2, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <_init>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

08003204 <_fini>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr
