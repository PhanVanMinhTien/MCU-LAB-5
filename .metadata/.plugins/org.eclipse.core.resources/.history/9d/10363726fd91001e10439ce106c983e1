/*
 * scheduler.c
 *
 *  Created on: Dec 1, 2023
 *      Author: mitph
 */

#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

/*void SCH_Init(void){
	current_index_task = 0;
}*/

void SCH_Init(void) {
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
		SCH_tasks_G[i].pTask = 0x0000;
		SCH_tasks_G[i].Delay = 0;
		SCH_tasks_G[i].Period = 0;
		SCH_tasks_G[i].RunMe = 0;
		SCH_tasks_G[i].TaskID = -1;
	}
}

/*void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
	if (current_index_task < SCH_MAX_TASKS){
		SCH_tasks_G[current_index_task].pTask = pFunction;
		SCH_tasks_G[current_index_task].Delay = DELAY;
		SCH_tasks_G[current_index_task].Period = PERIOD;
		SCH_tasks_G[current_index_task].RunMe = 0;

		SCH_tasks_G[current_index_task].TaskID = current_index_task;

		current_index_task++;
	}
}*/
uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
	unsigned char index=0;
	while ((SCH_tasks_G[index].pTask!=0x0000) && (index<SCH_MAX_TASKS)) {
		index++;
	}
	if (index>=SCH_MAX_TASKS) {
		return -1;
	}
	DELAY=(DELAY==0)?0:DELAY-1;
	SCH_tasks_G [ index ].pTask = pFunction;
	SCH_tasks_G [ index ].Delay = DELAY ;
	SCH_tasks_G [ index ].Period = PERIOD ;
	SCH_tasks_G [ index ].RunMe = 0 ;
	SCH_tasks_G [ index ].TaskID= index;
	return index;
}


/*void SCH_Update(void){
	for (int i = 0; i < current_index_task; i++){
		if (SCH_tasks_G[i].Delay > 0){
			SCH_tasks_G[i].Delay--;
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
			SCH_tasks_G[i].RunMe += 1;
		}
	}
}*/
void SCH_Update(void) {
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
		 if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay==0) {
//			timestamp(index);
			SCH_tasks_G[index].RunMe+=1;
			if (SCH_tasks_G[index].Period) {
				SCH_tasks_G[index].Delay=SCH_tasks_G[index].Period-1;
			}
		} else if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay>0) {
			SCH_tasks_G[index].Delay-=1;
		}
	}
}
void SCH_Dispatch_Tasks(void){
	for(int i = 0; i < current_index_task; i++){
		if (SCH_tasks_G[i].RunMe > 0){
			SCH_tasks_G[i].RunMe--;
			(*SCH_tasks_G[i].pTask)();
		}
	}
}
